# Server API definition

type Query {
    echo(message: String!): String!
}

type Mutation {
    createTable(settings: TableSettings!): RequestStatus!
    addPlayer(playerData: PlayerRegistrationData!): PlayerRegistrationStatus!
    removePlayer(playerData: PlayerRemovalData!): RequestStatus!
    takeAction(actionData: PlayerActionData!): RequestStatus!
    startGame: RequestStatus!
    stopGame: RequestStatus!
}

type Subscription {
    subscribe(subscriberData: SubscriberData!): TableUpdate!
}

# Helpers

enum StatusCode {
    OK
    INVALID_REQUEST
    SERVER_FAILURE
    ENGINE_FAILURE
    UNKNOWN_ERROR
}

type RequestStatus {
    code: StatusCode!
    message: String
}

enum BettingActionType {
    POST
    FOLD
    CHECK
    CALL
    BET
    RAISE
}

# Table creation

input TableSettings {
    jsonSettings: String!
}

# Adding player

input PlayerRegistrationData {
    playerName: String!
    seat: Int!
}

type PlayerRegistrationStatus {
    status: RequestStatus!
    playerToken: String
}

# Removing player

input PlayerRemovalData {
    playerToken: String!
}

# Betting action

type BettingAction {
    actionType: BettingActionType!

    # optional, used only with BET and RAISE actions
    chips: Int
}

input BettingActionInput {
    actionType: BettingActionType!

    # optional, used only with BET and RAISE actions
    chips: Int
}

input PlayerActionData {
    playerToken: String!
    action: BettingActionInput!
}

# Updates

input SubscriberData {
    playerToken: String
    isAdmin: Boolean
}

type TableUpdate {
    table: Table!
    actionToken: String
    possibleActions: [BettingAction!]
}

type Table {
    players: [Player!]!
    blinds: Blinds!

    # following fields are populated only if the game is running
    positions: Positions
    communityCards: [Card!]
    pots: [Int!]
}

type Blinds {
    smallBlind: Int!
    bigBlind: Int!
    ante: Int # TODO, currently not used by the engine
}

type Positions {
    button: Int!
    smallBlind: Int!
    bigBlind: Int!
}

type Player {
    name: String!
    seat: Int!
    stack: Int!

    # following fields are populated only for players in game
    cards: [Card!]
    currentBet: Int
    lastAction: BettingActionType
}

type Card {
    rank: CardRank
    suit: CardSuit
}

enum CardSuit {
    SPADES
    HEARTS
    DIAMONDS
    CLUBS
}

enum CardRank {
    ACE
    TWO
    THREE
    FOUR
    FIVE
    SIX
    SEVEN
    EIGHT
    NINE
    TEN
    JACK
    QUEEN
    KING
}