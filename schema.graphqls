# ==============================================================
# Server API definition
# ==============================================================

type Query {
    echo(message: String!): String!
}

type Mutation {
    createTable(settings: TableSettings!): SimpleRequestStatus!
    addPlayer(request: AddPlayerRequest!): AddPlayerStatus!
    removePlayer(request: RemovePlayerRequest!): SimpleRequestStatus!
    takeAction(request: ActionRequest!): SimpleRequestStatus!
    startGame: SimpleRequestStatus!
    stopGame: SimpleRequestStatus! # do not care
    reset: SimpleRequestStatus!
}

type Subscription {
    subscribe(request: SubscriptionRequest!): GameUpdate!
}

# ==============================================================
# input types
# ==============================================================

input TableSettings {
    jsonSettings: String!
}

input AddPlayerRequest {
    playerName: String!
    seat: Int!
}

input RemovePlayerRequest {
    playerToken: String!
}

input ActionRequest {
    actionToken: String!
    action: BettingActionType!

    chips: Int # used only with BET and RAISE actions
}

input SubscriptionRequest {
    playerToken: String!
}

# ==============================================================
# response types
# ==============================================================

type SimpleRequestStatus {
    code: StatusCode!

    message: String
}

type AddPlayerStatus {
    code: StatusCode!

    message: String
    playerToken: String
}

type GameUpdate {
    table: Table!

    actionToken: String
    possibleActions: [BettingAction!]
}

# ==============================================================
# nested types
# ==============================================================

type Table {
    players: [Player!]!
    blinds: Blinds!

    activePlayerSeat: Int
    positions: Positions
    communityCards: [Card!]
    pots: [Int!]
}

type Blinds {
    smallBlind: Int!
    bigBlind: Int!

    ante: Int # TODO, currently not used by the engine
}

type Positions {
    button: Int!
    smallBlind: Int!
    bigBlind: Int!
}

type Player {
    name: String!
    seat: Int!
    stack: Int!

    cards: [Card!]
    currentBet: Int
    lastAction: BettingActionType
}

type Card {
    rank: CardRank
    suit: CardSuit
    isHidden: Boolean
}

type BettingAction {
    actionType: BettingActionType!

    chips: Int
}

# ==============================================================
# enums
# ==============================================================

enum StatusCode {
    OK
    INVALID_REQUEST
    SERVER_FAILURE
    ENGINE_FAILURE
    UNKNOWN_ERROR
}

enum BettingActionType {
    POST
    FOLD
    CHECK
    CALL
    BET
    RAISE
}

enum CardSuit {
    SPADES
    HEARTS
    DIAMONDS
    CLUBS
}

enum CardRank {
    ACE
    TWO
    THREE
    FOUR
    FIVE
    SIX
    SEVEN
    EIGHT
    NINE
    TEN
    JACK
    QUEEN
    KING
}